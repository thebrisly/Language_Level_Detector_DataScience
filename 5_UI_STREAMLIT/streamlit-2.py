# -*- coding: utf-8 -*-
"""Streamlit

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VUBneX3PKXB5ubIk4ZLIHUUtWfk-UGWC
"""

!pip install tensorflow
!pip install transformers
!pip install sentencepiece
!pip install streamlit
!pip install pyngrok
!pip install ngrok

import pandas as pd
import torch
from transformers import CamembertTokenizer, CamembertForSequenceClassification, AdamW, CamembertConfig, AutoTokenizer
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from torch.utils.data import TensorDataset, DataLoader, RandomSampler, SequentialSampler
from tqdm import tqdm
from sklearn.metrics import accuracy_score
import streamlit as st
import os
from google.colab import drive
import sentencepiece


#import docx2txt
#import pdfplumber
#import io
#import speech_recognition as sr

# Load the saved model, tokenizer, and config from Google Drive
loaded_model = CamembertForSequenceClassification.from_pretrained('./geneva_model')
loaded_tokenizer = CamembertTokenizer.from_pretrained('./geneva_model')
loaded_config = CamembertConfig.from_pretrained('./geneva_model')

model_path = r'C:'
model = CamembertForSequenceClassification.from_pretrained(model_path)
model.eval()

# Fonction pour prédire le niveau de difficulté
def predict_difficulty(text):
    with torch.no_grad():
        inputs = tokenizer.encode_plus(
            text,
            add_special_tokens=True,
            max_length=64,
            pad_to_max_length=True,
            return_attention_mask=True,
            return_tensors='pt'
        )

        input_ids = inputs['input_ids'].to(device)
        attention_mask = inputs['attention_mask'].to(device)

        outputs = model(input_ids, attention_mask=attention_mask)
        logits = outputs.logits
        predicted_class = torch.argmax(logits, dim=1).item()

    return predicted_class

# Interface utilisateur Streamlit
st.title("Application de Prédiction de Niveau de Difficulté avec CamemBERT")

user_input = st.text_area("Entrez le texte à évaluer:")
if st.button("Prédire"):
    if user_input:
        # Appeler la fonction de prédiction avec les données de l'utilisateur
        predicted_difficulty = predict_difficulty(user_input)

        # Convertir la prédiction en niveau de difficulté
        difficulty_levels = {0: 'A1', 1: 'A2', 2: 'B1', 3: 'B2', 4: 'C1', 5: 'C2'}
        predicted_difficulty_str = difficulty_levels[predicted_difficulty]

        st.success(f"Niveau de difficulté prédit : {predicted_difficulty_str}")
    else:
        st.warning("Veuillez entrer du texte avant de cliquer sur 'Prédire'")

!streamlit run /usr/local/lib/python3.10/dist-packages/colab_kernel_launcher.py &>/dev/null&

# Créer un tunnel pour accéder à l'application
from pyngrok import ngrok
url = ngrok.connect(port=8501)
print('Tunnel URL:', url)

"""# New section"""